{
    "sourceFile": "bootstrap/app.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1637039552545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1637039552545,
            "name": "Commit-0",
            "content": "<?php\n\nrequire_once __DIR__.'/../vendor/autoload.php';\n\n(new Laravel\\Lumen\\Bootstrap\\LoadEnvironmentVariables(\n    dirname(__DIR__)\n))->bootstrap();\n\ndate_default_timezone_set(env('APP_TIMEZONE', 'UTC'));\n\n/*\n|--------------------------------------------------------------------------\n| Create The Application\n|--------------------------------------------------------------------------\n|\n| Here we will load the environment and create the application instance\n| that serves as the central piece of this framework. We'll use this\n| application as an \"IoC\" container and router for this framework.\n|\n*/\n\n$app = new Laravel\\Lumen\\Application(\n    dirname(__DIR__)\n);\n\n// $app->withFacades();\n\n// $app->withEloquent();\n\n/*\n|--------------------------------------------------------------------------\n| Register Container Bindings\n|--------------------------------------------------------------------------\n|\n| Now we will register a few bindings in the service container. We will\n| register the exception handler and the console kernel. You may add\n| your own bindings here if you like or you can make another file.\n|\n*/\n\n$app->singleton(\n    Illuminate\\Contracts\\Debug\\ExceptionHandler::class,\n    App\\Exceptions\\Handler::class\n);\n\n$app->singleton(\n    Illuminate\\Contracts\\Console\\Kernel::class,\n    App\\Console\\Kernel::class\n);\n\n/*\n|--------------------------------------------------------------------------\n| Register Config Files\n|--------------------------------------------------------------------------\n|\n| Now we will register the \"app\" configuration file. If the file exists in\n| your configuration directory it will be loaded; otherwise, we'll load\n| the default version. You may register other files below as needed.\n|\n*/\n\n$app->configure('app');\n\n/*\n|--------------------------------------------------------------------------\n| Register Middleware\n|--------------------------------------------------------------------------\n|\n| Next, we will register the middleware with the application. These can\n| be global middleware that run before and after each request into a\n| route or middleware that'll be assigned to some specific routes.\n|\n*/\n\n// $app->middleware([\n//     App\\Http\\Middleware\\ExampleMiddleware::class\n// ]);\n\n// $app->routeMiddleware([\n//     'auth' => App\\Http\\Middleware\\Authenticate::class,\n// ]);\n\n/*\n|--------------------------------------------------------------------------\n| Register Service Providers\n|--------------------------------------------------------------------------\n|\n| Here we will register all of the application's service providers which\n| are used to bind services into the container. Service providers are\n| totally optional, so you are not required to uncomment this line.\n|\n*/\n\n// $app->register(App\\Providers\\AppServiceProvider::class);\n// $app->register(App\\Providers\\AuthServiceProvider::class);\n// $app->register(App\\Providers\\EventServiceProvider::class);\n\n/*\n|--------------------------------------------------------------------------\n| Load The Application Routes\n|--------------------------------------------------------------------------\n|\n| Next we will include the routes file so that they can all be added to\n| the application. This will provide all of the URLs the application\n| can respond to, as well as the controllers that may handle them.\n|\n*/\n\n$app->router->group([\n    'namespace' => 'App\\Http\\Controllers',\n], function ($router) {\n    require __DIR__.'/../routes/api.php';\n});\n\nreturn $app;\n"
        }
    ]
}